/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package KafkaPLCProducer.producer;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PLCData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1688554946203065408L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PLCData\",\"namespace\":\"producer\",\"fields\":[{\"name\":\"orderNr\",\"type\":\"long\",\"doc\":\"OrderNumber of the plant\"},{\"name\":\"sender_name\",\"type\":\"string\",\"doc\":\"OrderNumber of the device\"},{\"name\":\"operation\",\"type\":\"string\",\"doc\":\"Read or Write Operation\"},{\"name\":\"data_type\",\"type\":\"string\",\"doc\":\"Type of Plc Data\"},{\"name\":\"data\",\"type\":\"long\",\"doc\":\"Random Number for the test\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PLCData> ENCODER =
      new BinaryMessageEncoder<PLCData>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PLCData> DECODER =
      new BinaryMessageDecoder<PLCData>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<PLCData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<PLCData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PLCData>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this PLCData to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a PLCData from a ByteBuffer. */
  public static PLCData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** OrderNumber of the plant */
  @Deprecated public long orderNr;
  /** OrderNumber of the device */
  @Deprecated public java.lang.CharSequence sender_name;
  /** Read or Write Operation */
  @Deprecated public java.lang.CharSequence operation;
  /** Type of Plc Data */
  @Deprecated public java.lang.CharSequence data_type;
  /** Random Number for the test */
  @Deprecated public long data;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PLCData() {}

  /**
   * All-args constructor.
   * @param orderNr OrderNumber of the plant
   * @param sender_name OrderNumber of the device
   * @param operation Read or Write Operation
   * @param data_type Type of Plc Data
   * @param data Random Number for the test
   */
  public PLCData(java.lang.Long orderNr, java.lang.CharSequence sender_name, java.lang.CharSequence operation, java.lang.CharSequence data_type, java.lang.Long data) {
    this.orderNr = orderNr;
    this.sender_name = sender_name;
    this.operation = operation;
    this.data_type = data_type;
    this.data = data;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return orderNr;
    case 1: return sender_name;
    case 2: return operation;
    case 3: return data_type;
    case 4: return data;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: orderNr = (java.lang.Long)value$; break;
    case 1: sender_name = (java.lang.CharSequence)value$; break;
    case 2: operation = (java.lang.CharSequence)value$; break;
    case 3: data_type = (java.lang.CharSequence)value$; break;
    case 4: data = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'orderNr' field.
   * @return OrderNumber of the plant
   */
  public java.lang.Long getOrderNr() {
    return orderNr;
  }

  /**
   * Sets the value of the 'orderNr' field.
   * OrderNumber of the plant
   * @param value the value to set.
   */
  public void setOrderNr(java.lang.Long value) {
    this.orderNr = value;
  }

  /**
   * Gets the value of the 'sender_name' field.
   * @return OrderNumber of the device
   */
  public java.lang.CharSequence getSenderName() {
    return sender_name;
  }

  /**
   * Sets the value of the 'sender_name' field.
   * OrderNumber of the device
   * @param value the value to set.
   */
  public void setSenderName(java.lang.CharSequence value) {
    this.sender_name = value;
  }

  /**
   * Gets the value of the 'operation' field.
   * @return Read or Write Operation
   */
  public java.lang.CharSequence getOperation() {
    return operation;
  }

  /**
   * Sets the value of the 'operation' field.
   * Read or Write Operation
   * @param value the value to set.
   */
  public void setOperation(java.lang.CharSequence value) {
    this.operation = value;
  }

  /**
   * Gets the value of the 'data_type' field.
   * @return Type of Plc Data
   */
  public java.lang.CharSequence getDataType() {
    return data_type;
  }

  /**
   * Sets the value of the 'data_type' field.
   * Type of Plc Data
   * @param value the value to set.
   */
  public void setDataType(java.lang.CharSequence value) {
    this.data_type = value;
  }

  /**
   * Gets the value of the 'data' field.
   * @return Random Number for the test
   */
  public java.lang.Long getData() {
    return data;
  }

  /**
   * Sets the value of the 'data' field.
   * Random Number for the test
   * @param value the value to set.
   */
  public void setData(java.lang.Long value) {
    this.data = value;
  }

  /**
   * Creates a new PLCData RecordBuilder.
   * @return A new PLCData RecordBuilder
   */
  public static PLCData.Builder newBuilder() {
    return new PLCData.Builder();
  }

  /**
   * Creates a new PLCData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PLCData RecordBuilder
   */
  public static PLCData.Builder newBuilder(PLCData.Builder other) {
    return new PLCData.Builder(other);
  }

  /**
   * Creates a new PLCData RecordBuilder by copying an existing PLCData instance.
   * @param other The existing instance to copy.
   * @return A new PLCData RecordBuilder
   */
  public static PLCData.Builder newBuilder(PLCData other) {
    return new PLCData.Builder(other);
  }

  /**
   * RecordBuilder for PLCData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PLCData>
    implements org.apache.avro.data.RecordBuilder<PLCData> {

    /** OrderNumber of the plant */
    private long orderNr;
    /** OrderNumber of the device */
    private java.lang.CharSequence sender_name;
    /** Read or Write Operation */
    private java.lang.CharSequence operation;
    /** Type of Plc Data */
    private java.lang.CharSequence data_type;
    /** Random Number for the test */
    private long data;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(PLCData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.orderNr)) {
        this.orderNr = data().deepCopy(fields()[0].schema(), other.orderNr);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sender_name)) {
        this.sender_name = data().deepCopy(fields()[1].schema(), other.sender_name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.operation)) {
        this.operation = data().deepCopy(fields()[2].schema(), other.operation);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.data_type)) {
        this.data_type = data().deepCopy(fields()[3].schema(), other.data_type);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.data)) {
        this.data = data().deepCopy(fields()[4].schema(), other.data);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing PLCData instance
     * @param other The existing instance to copy.
     */
    private Builder(PLCData other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.orderNr)) {
        this.orderNr = data().deepCopy(fields()[0].schema(), other.orderNr);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sender_name)) {
        this.sender_name = data().deepCopy(fields()[1].schema(), other.sender_name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.operation)) {
        this.operation = data().deepCopy(fields()[2].schema(), other.operation);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.data_type)) {
        this.data_type = data().deepCopy(fields()[3].schema(), other.data_type);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.data)) {
        this.data = data().deepCopy(fields()[4].schema(), other.data);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'orderNr' field.
      * OrderNumber of the plant
      * @return The value.
      */
    public java.lang.Long getOrderNr() {
      return orderNr;
    }

    /**
      * Sets the value of the 'orderNr' field.
      * OrderNumber of the plant
      * @param value The value of 'orderNr'.
      * @return This builder.
      */
    public PLCData.Builder setOrderNr(long value) {
      validate(fields()[0], value);
      this.orderNr = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'orderNr' field has been set.
      * OrderNumber of the plant
      * @return True if the 'orderNr' field has been set, false otherwise.
      */
    public boolean hasOrderNr() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'orderNr' field.
      * OrderNumber of the plant
      * @return This builder.
      */
    public PLCData.Builder clearOrderNr() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'sender_name' field.
      * OrderNumber of the device
      * @return The value.
      */
    public java.lang.CharSequence getSenderName() {
      return sender_name;
    }

    /**
      * Sets the value of the 'sender_name' field.
      * OrderNumber of the device
      * @param value The value of 'sender_name'.
      * @return This builder.
      */
    public PLCData.Builder setSenderName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.sender_name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'sender_name' field has been set.
      * OrderNumber of the device
      * @return True if the 'sender_name' field has been set, false otherwise.
      */
    public boolean hasSenderName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'sender_name' field.
      * OrderNumber of the device
      * @return This builder.
      */
    public PLCData.Builder clearSenderName() {
      sender_name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'operation' field.
      * Read or Write Operation
      * @return The value.
      */
    public java.lang.CharSequence getOperation() {
      return operation;
    }

    /**
      * Sets the value of the 'operation' field.
      * Read or Write Operation
      * @param value The value of 'operation'.
      * @return This builder.
      */
    public PLCData.Builder setOperation(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.operation = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'operation' field has been set.
      * Read or Write Operation
      * @return True if the 'operation' field has been set, false otherwise.
      */
    public boolean hasOperation() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'operation' field.
      * Read or Write Operation
      * @return This builder.
      */
    public PLCData.Builder clearOperation() {
      operation = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'data_type' field.
      * Type of Plc Data
      * @return The value.
      */
    public java.lang.CharSequence getDataType() {
      return data_type;
    }

    /**
      * Sets the value of the 'data_type' field.
      * Type of Plc Data
      * @param value The value of 'data_type'.
      * @return This builder.
      */
    public PLCData.Builder setDataType(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.data_type = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'data_type' field has been set.
      * Type of Plc Data
      * @return True if the 'data_type' field has been set, false otherwise.
      */
    public boolean hasDataType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'data_type' field.
      * Type of Plc Data
      * @return This builder.
      */
    public PLCData.Builder clearDataType() {
      data_type = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'data' field.
      * Random Number for the test
      * @return The value.
      */
    public java.lang.Long getData() {
      return data;
    }

    /**
      * Sets the value of the 'data' field.
      * Random Number for the test
      * @param value The value of 'data'.
      * @return This builder.
      */
    public PLCData.Builder setData(long value) {
      validate(fields()[4], value);
      this.data = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'data' field has been set.
      * Random Number for the test
      * @return True if the 'data' field has been set, false otherwise.
      */
    public boolean hasData() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'data' field.
      * Random Number for the test
      * @return This builder.
      */
    public PLCData.Builder clearData() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PLCData build() {
      try {
        PLCData record = new PLCData();
        record.orderNr = fieldSetFlags()[0] ? this.orderNr : (java.lang.Long) defaultValue(fields()[0]);
        record.sender_name = fieldSetFlags()[1] ? this.sender_name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.operation = fieldSetFlags()[2] ? this.operation : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.data_type = fieldSetFlags()[3] ? this.data_type : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.data = fieldSetFlags()[4] ? this.data : (java.lang.Long) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PLCData>
    WRITER$ = (org.apache.avro.io.DatumWriter<PLCData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PLCData>
    READER$ = (org.apache.avro.io.DatumReader<PLCData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
